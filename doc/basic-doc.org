* Definicion del proyecto
** Descripción
Proyecto Serenity (Recetario de cocina para Android)
** Elementos
- API
- App Android
- Web (futuro)

** Objetivos
*** Primarios
- Semántica:
  + Ingredientes "restringidos" y medidas "estándares"
  + Introducción de pasos delimitada
- Cronómetro (opcional) en cada paso
- Media (opcional) en cada paso: imagen o video
- Valorar recetas (puntuación)

*** Secundarios o futuros
- Dashboard inicial (recomendación de recetas en función de los
  gustos)
- Lectura automática de la receta
- Reconocimiento de voz (órdenes de lectura)

** API
*** Clases
- Recipe:
  + Title
  + User
  + Language
  + Created timestamp
  + Updated timestamp
  + Cooking time
  + Image URL (¿?)
  + Total rating
  + Users rating
  + Servings
  + Source (URL or text)
  + Categories (array):
    * Category
  + Ingredients (array):
    * Quantity
    * Name
    * Measurement unit
  + Directions (array):
    * Sort number
    * Description
    * Image URL (¿?)
    * Video URL (¿?)
    * Time
  + Comments (array):
    * User
    * Comment

**** Future
- Menu (recipes set)
- Rating (user - recipes)

** Cuestiones
*** Qué base de datos escoger
- ¿SQL o NoSQL?
- Cuál de ellas
*** Qué framework para la API escoger
- Lenguaje: Python
  Ya he trabajado con APIs en PHP y de los demás lenguajes, me
  interesa probar con Python por ver otra faceta más de éste.

- Qué framework: ¿Django o Flask?
  Django es más complejo, pero permite hacer más cosas.

*** Qué plataforma para la App escoger
- iOS: trabajo con ella habitualmente, por lo que no me
  interesa. Además es muy caro y no puedo permitírmelo: 90$ al año +
  Mac.
- Firefox OS: no tiene mucho mercado todavía. Quizá en un futuro.
- Windows Phone: hay que desarrollar desde Windows 8 y, por
  principios, no utilizo ese sistema, sólo uso equipos con GNU Linux
  (salvo en el trabajo que uso Mac).
- Android: elegido por poseer un mercado enorme, poseer un equipo
  apto para su desarrollo y económicamente es mucho más viable
  desarrollar (20 $ para toda la vida). Además tengo dispositivos
  Android en los que poder realizar pruebas físicas, además de en el
  simulador.

*** Monetización
- Añadir publicidad
- Donaciones voluntarias, pero eso no cuenta.
- ¿Algo más?
* Instalación
** Desde cero
- Python: sudo apt-get install python-dev build-essential python3-dev
- PIP: sudo apt-get install python-pip
- Virtualenv: sudo pip install virtualenv
- PostgreSQL:
  + sudo apt-get install postgresql postgresql-contrib libpq-dev
  + GUI: sudo apt-get install pgadmin3
  + Change password: sudo -u postgres psql postgres
  + \password postgres
  + Create DB: sudo -u postgres createdb amusedb
  + Lanzar servidor: sudo service postgresql start
- Redis:
  + wget http://download.redis.io/releases/redis-2.8.12.tar.gz
  + tar xzf redis-2.8.12.tar.gz
  + cd redis-2.8.12
  + make
- Sphinx: sudo apt-get install python-sphinx

** Virtualenv
- Activar virtualenv:
  + La versión de python es opcional (toma una por defecto):
    virtualenv -p /usr/bin/python3 env 
  + source env/bin/activate
  + Nota: Para salir del entorno de virtualenv, usar deactivate
- Instalar paquetes requeridos:
  + pip install django
- django-admin.py startproject
  --template=https://github.com/sebastibe/django-rest-skeleton/archive/master.zip amuseapi
- Flake8: pip install flake8
  + Para usarlo: flake8 directorio
  + Intentar instalar el hook para git (no ha funcionado la primera vez)

    
** Configuración básica de Django
- Actualizar paquetes requeridos:
  pip install -r reqs/all.txt
- Crear un nuevo proyecto de Django:
  + django-admin.py startproject nombre-proyecto
  + cd nombre-proyecto
- Crear una nueva app:
  + python manage.py startapp nombre-app
- Configurar la base de datos en nombre-proyecto/settings.py
  + python ./manage.py syncdb
  + python ./manage.py createsuperuser
- Configurar las URLs en nombre-proyecto/urls.py


** Configuración nueva plantilla
- Desarrollo o producción: echo "true" > envdir/DEBUG
- Base de datos estilo Heroku:
   echo "postgres://postgres@localhost:5432/project" > envdir/DATABASE_URL
- Configuración de Postgres:
  + Añadir -d para desarrollo: sudo -u postgres createuser -d -A -P amuseuser
  + sudo -u postgres createdb -O amuseuser amusedb
- Ejecutar Redis Server: $DIR/src/redis-server
- Ejecutar configuración de Sphinx: sphinx-quickstart
- Django Model Utils: pip install django-model-utils
- Settings.py:
  + Línea 272: Actualizar usuario, contraseña y BD

** Diario
*** 11 septiembre
- Ejecución del servidor: python ./manage.py runserver
- Da un error por no tener instalado ciertas cosas, así que intento
  reinstalar todos los paquetes requeridos:
  pip install -r reqs/all.txt
- Error: No moduel named 'backends'
- pip install --upgrade setuptools
- El módulo oAuth2 no soporta python 3
- Desinstalar oauth2: pip uninstall django-oauth2-provider
- Borrar los dos entornos de virtualenv y empezar con uno nuevo en el
  directorio amuseapi
- Crear un nuevo entorno e instalar los paquetes de reqs/required.txt
  y reqs/optional.txt (reqs/all.txt)
- Comentar las líneas 154 a 164 de api/settings.py
- Ya ejecuta correctamente el servidor.
- Siguiente día: probar usuario administrador e intentar hacer un modelo.

*** 12 septiembre
- El ordenador ha vuelto a fallar, así que instalo todo de cero en el ordenador del trabajo.
- Instalar python3 y buscar directorio
- Instalar pip y virtualenv
- Generar un nuevo entorno y entrar: virtualenv -p /usr/local/bin/python3 env
- Instalar postgres (antes de instalar los paquetes o psycopg2 fallará):
  + brew install postgresql
  + sudo gem install lunchy
  + sudo mkdir -p ~/Library/LaunchAgents
  + sudo cp /usr/local/Cellar/postgresql/9.3.4/homebrew.mxcl.postgresql.plist ~/Library/LaunchAgents/
  + Fuente: http://www.moncefbelyamani.com/how-to-install-postgresql-on-a-mac-with-homebrew-and-lunchy/
- Iniciar postgres: lunchy start postgres
- Instalar paquetes requeridos: pip install -r reqs/all.txt
- Crear archivos de envdir:
  + echo "postgres://postgres@localhost:5432/project" > DATABASE_URL
  + echo "true" > DEBUG (o false)
  + echo "password" > SECRET_KEY

*** 1 diciembre
**** Vagrant
    - Nuevo repo: drf-vagrant-config
    - Uso:
      + vagrant up
      + vagrant ssh
      + vagrant destroy
    - Fracaso total: no funciona nada. Problemas con ansible.
    - Borrado del repo
**** Reinicio
    - source env/bin/activate
    - pip install -r reqs/all.txt
    - python manage.py runserver
    - Funciona, pero da un error de permisos: "Authentication
      credentials were not provided."
**** Postgre
    - Acceso:  sudo -u postgres psql
    - El usuario, la base de datos y la contraseña están
      correctamente definidos.
    - Reconfiguración de la base de datos en settings.py:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'amusedb',
        'USER': 'amuseuser',
        'PASSWORD': '171287',
        'HOST': '127.0.0.1'
    }
}

**** Otros problemas
    - Nuevo error: "relation "django_site" does not exist"
    - Resincronizando DB: python manage.py syncdb
      A partir de ahora hay que usar manage.py migrate, para no
      perder los datos.
    - Fallo de sincronización con users_User: ./manage.py migrate
    - Creación de superusuario: ./manage.py createsuperuser
    - Entrar en la URL y loguearse ya funciona.



*** 7 enero
- Buscando tipos de datos
- Maps y lists: http://drf-compound-fields.readthedocs.org/en/latest/readme.html

*** 10 enero
- Nuevos modelos de datos
- Nuevos serializadores
- Nuevas vistas
- Al probar la vista "recipe_list" da un error. No se si tiene que
  ver con que no exista ninguna receta en la base de datos.
** Fuentes
*** Plantillas
- Django REST skeleton (plantilla):
  https://github.com/sebastibe/django-rest-skeleton
- Django REST framework template:
  http://vincent.is/making-a-django-rest-framework-template/
*** Modelos
- Django Model Utils: https://django-model-utils.readthedocs.org/en/latest/index.html
-
  http://stackoverflow.com/questions/18958205/concurrent-requests-in-django
-
  http://stackoverflow.com/questions/1355150/django-when-saving-how-can-you-check-if-a-field-has-changed
*** Imgur
- http://api.imgur.com/
- https://github.com/jacobgreenleaf/imgur-python/
- https://github.com/talklittle/ImgurAPIv3ExampleAndroid
*** Postgres
- https://help.ubuntu.com/community/PostgreSQL
